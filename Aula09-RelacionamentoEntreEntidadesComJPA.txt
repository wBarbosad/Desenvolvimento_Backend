 Mapeamento objeto relacional: Converter classe em tabela e tabela em classe

JPA: Especificação, um conjunto de regras para fazer mapeamento em java. Incluir informações, deletar, etc; Padrões a ser seguidos; [Interface]

Hibernate: Método concreto, framework de persistência, faz a mudança de tabela em classe e vice-versa;




1. Dependency da JPA;
2. Dependecy do mysql;
3. Validation; => Notnull não era correto, mas o validation yes.

<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
</dependency> 


4. Application.properties => Local onde colocamos strings de conexão com o banco de dados;

url: Banco que vamos utilizar e a rota de conexão com o banco;
jdbc:mysql = O banco de dados vai ser o MySQL;

spring.datasource.url = jdbc:mysql://localhost/db_jogos?createDatabaseIfNotExist=true

A rota é: //localhost/db_jogos = a rota e o nome do banco;

ddl-auto: Estrategia quando há conexão com o banco de dados, colocando: create, há uma criação de banco e o anterior é jogado fora

O update: Atualiza e não cria um banco de dados novo; 






Anotation na classe de model que representa uma tabela no banco de dados;

@Entity = Será tratada como uma entidade no banco, portanto, coloco essa anotation;

@Id = Chave primária acima do banco;
@GeneratedValue(strategy = GenerationType.IDENTITY) Parâmeto = Estratégia para gerar valores



@NotNull 

Ctrl + alt + shit + J = Selecionar
Ctrl + alt + o

Colocamos o @NotNull do pacote: import javax.validation.constraints.NotNull;




Repository

extends JpaRepository<> -> Interface genérica que permite dizer qual é o tipo de dado que queremos transformar em tabela <Classe>, e o tipo do id (o primitivo) Integer



MySQL 

use db_jogos;
select * from jogo;
delete from jogo where id=2;


============

Relacionamento entre entidades;


Multiplicidade de métodos

uma categoria (Classe) possui muitos jogos => @OneToMany//Uma classe categoria vai ter muitos jogos;


@OneToMany(mappedBy = "categoria"); 1 categoria p/ muitos jogos; Qual é a entidade responsável por guardar a chave estrangeira do outro;
Chave estrangeira é a relação entre tabelas;


 @OneToMany(mappedBy = "categoria", cascade = CascadeType.ALL)
    @JsonIgnoreProperties("categoria") //Ignorar certas propriedades da lista que tem dentro dela
    public List<Jogo> jogos; //O jogo vai ser responsável por guardar a chave estrangeira, o id da categoria ao qual ele pertence;



@ManyToOne //Vários jogos para uma categoria
    @JoinColumn(name = "categoria_id") //Nossa chave estrangeira
    @JsonIgnoreProperties("jogos")
    private Categoria categoria; //Um objeto dentro de outro objeto;

jogos, jogo = vai ser responsável por mapear a chave estrangeira;
cascade = CascadeType.ALL ==> Resolve/nos dá a permissão de executar as coisas em cascatas, p. exemplo, ao deletar uma categoria, eu deleto todos os jogos;



C:\Users\WESLEY\OneDrive\Desktop\Desenvolvimento_Backend\Aulas\Aula07\jogos-back\jogos\jogos

mvn clean install 

pasta target -> cd target

java -jar jogos